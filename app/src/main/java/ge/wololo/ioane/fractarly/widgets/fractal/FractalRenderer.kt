package ge.wololo.ioane.fractarly.widgets.fractal

import android.graphics.Bitmap
import android.util.Size
import ge.wololo.ioane.fractarly.utils.Coordinates
import kotlinx.coroutines.channels.ReceiveChannel

/**
 * Fractal renderer is an interface that should be used to generate fractal as a Bitmap, so that
 * it's drawn on canvas.
 *
 * This just handles bitmap creation with specified elements.
 * Note that FractalRenderer might cache some data and provide fast render,
 * once some part is already rendered.
 */
interface FractalRenderer {

    /**
     * This is the size of bitmap generated by [renderChannel]
     */
    var renderSize: Size

    /**
     * This is point that fractal is looking at
     */
    var currentFocus: Coordinates

    /**
     * How many pixels does it take to draw a single unit of fractal space
     */
    val pixelPerUnit: Int

    /**
     * This is current zoom level on fractal (that is  between [minZoom] and [maxZoom]
     */
    var currentZoom: Float

    /**
     * Defines, how much fractal can be zoomed out.
     * Null if no restrictions whatsoever
     */
    val minZoom: Float?

    /**
     * Defines, how much fractal can be zoomed in.
     * Null if no restrictions whatsoever
     */
    val maxZoom: Float?

    /**
     * It sends render images in this channel
     */
    val renderChannel: ReceiveChannel<Bitmap>

    /**
     * This is relative move and zoom. If all those params are 0, it does not affect fractal.
     */
    fun changeBy(x: Float = 0f, y: Float = 0f, zoom: Float = 0f)
}